# Server-Konfiguration
server.servlet.context-path=/
server.port=${PORT:8085}

# Datenbank-Konfiguration für gemeinsame Datenbank
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5436/bookstore}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false

# Debug-Logging für CORS und Web-Anfragen
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=TRACE
logging.level.org.springframework.web.cors=DEBUG

# Schema-Konfiguration für Multitenancy
spring.jpa.properties.hibernate.default_schema=product_intelligence
spring.jpa.properties.hibernate.globally_quoted_identifiers=true

# Schema automatisch erstellen
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.flyway.enabled=false

# Swagger-Konfiguration
springdoc.swagger-ui.path=/swagger-ui/index.html
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha

# CORS-Konfiguration
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Domain-Konfiguration mit original Variablennamen aus .env
web.domain=${WEB_DOMAIN:localhost:8085}

# OpenAI Konfiguration
ai.openai.api-key=${OPENAI_API_KEY}
ai.openai.model=gpt-3.5-turbo

# Google Cloud Vision Konfiguration (optional)
ai.google-vision.credentials-path=${GOOGLE_APPLICATION_CREDENTIALS:}
ai.google-vision.project-id=${GCP_PROJECT_ID:}
ai.google-vision.enabled=${ai.google-vision.credentials-path:false}

# Spring MVC
spring.mvc.static-path-pattern=/**

# Multipart-Datei-Größenbegrenzung
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB