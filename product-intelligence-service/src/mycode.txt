### main/java/com/mybookstore/productintelligence/ProductIntelligenceServiceApplication.java
package com.mybookstore.productintelligence;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication(exclude = {
        org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.class,
        org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration.class
})
public class ProductIntelligenceServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(ProductIntelligenceServiceApplication.class, args);
    }
}

### main/java/com/mybookstore/productintelligence/config/OpenApiConfig.java
package com.mybookstore.productintelligence.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.servers.Server;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class OpenApiConfig {

        @Value("${WEB_DOMAIN:localhost:8085}") // Fallback für lokale Umgebung
        private String webDomain;

        @Value("${SPRING_CONTACT_NAME:DNguyen}")
        private String contactName;

        @Value("${SPRING_CONTACT_URL:https://github.com/thanhtuanh}")
        private String contactUrl;

        @Value("${SPRING_CONTACT_EMAIL:n.thanh@gmx.de}")
        private String contactEmail;

        @Bean
        public OpenAPI customOpenAPI() {
                String protocol = webDomain.contains("localhost") ? "http" : "https";
                return new OpenAPI()
                                .servers(List.of(
                                                new Server()
                                                                .url(protocol + "://" + webDomain)
                                                                .description(protocol.equals("https")
                                                                                ? "Produktivsystem"
                                                                                : "Lokale Entwicklung")))
                                .info(new Info()
                                                .title("PIM AI Connector – Product Intelligence API")
                                                .version("1.0.0")
                                                .description("Diese API erzeugt KI-gestützte Buchbeschreibungen, analysiert Buchcover und verarbeitet Produktinformationen automatisch.")
                                                .contact(new Contact()
                                                                .name(contactName)
                                                                .url(contactUrl)
                                                                .email(contactEmail)));
        }

        @Bean
        public GroupedOpenApi groupedOpenApi() {
                return GroupedOpenApi.builder()
                                .group("📚 Buchbeschreibung & KI")
                                .packagesToScan("com.mybookstore.productintelligence.controller")
                                .build();
        }
}


### main/java/com/mybookstore/productintelligence/config/RestTemplateConfig.java
package com.mybookstore.productintelligence.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
import org.springframework.boot.web.client.RestTemplateBuilder;
import java.time.Duration;

@Configuration
public class RestTemplateConfig {

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        return builder
                .setConnectTimeout(Duration.ofSeconds(10))
                .setReadTimeout(Duration.ofSeconds(30))
                .build();
    }
}

### main/java/com/mybookstore/productintelligence/config/SpringDocConfiguration.java
package com.mybookstore.productintelligence.config;

import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springdoc.core.customizers.OperationCustomizer;

import java.util.ArrayList;
import java.util.List;

@Configuration
public class SpringDocConfiguration {

    @Value("${server.port:8085}")
    private String serverPort;

    /**
     * Konfiguriere einen benutzerdefinierten OperationCustomizer,
     * um sicherzustellen, dass die Swagger-UI richtig geladen wird.
     */
    @Bean
    @Primary
    public OperationCustomizer customGlobalHeaders() {
        return (operation, handlerMethod) -> {
            // Stelle sicher, dass alle Operationen die richtigen Server verwenden
            if (operation.getServers() == null) {
                List<Server> servers = new ArrayList<>();
                servers.add(new Server().url("http://localhost:" + serverPort).description("Local Development Server"));
                operation.setServers(servers);
            }
            return operation;
        };
    }
}

### main/java/com/mybookstore/productintelligence/config/WebConfig.java
package com.mybookstore.productintelligence.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Value("${WEB_DOMAIN:localhost:8080}")
    private String webDomain;

    @Value("${FRONTEND_URL:http://localhost:4200}")
    private String frontendUrl;

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins(
                        "http://" + webDomain,
                        "https://" + webDomain,
                        frontendUrl,
                        "https://bookstore-demo.onrender.com")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}

### main/java/com/mybookstore/productintelligence/controller/BookCoverController.java
package com.mybookstore.productintelligence.controller;

import com.mybookstore.productintelligence.dto.BookCoverAnalysisResponse;
import com.mybookstore.productintelligence.dto.ImageCategoryResponse;
import com.mybookstore.productintelligence.service.GoogleVisionService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/intelligence")
@ConditionalOnProperty(name = "ai.google-vision.enabled", havingValue = "true")
public class BookCoverController {

    private static final Logger log = LoggerFactory.getLogger(BookCoverController.class);
    private final GoogleVisionService visionService;

    public BookCoverController(GoogleVisionService visionService) {
        this.visionService = visionService;
    }

    /**
     * Endpoint for extracting text from book cover images
     * 
     * @param file   The book cover image file
     * @param bookId Optional book ID reference
     * @return Extracted text and metadata
     */
    @PostMapping(value = "/cover-text", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<BookCoverAnalysisResponse> extractTextFromBookCover(
            @RequestParam("file") MultipartFile file,
            @RequestParam(value = "bookId", required = false) String bookId) {

        log.info("Received request to extract text from book cover: {}", file.getOriginalFilename());

        BookCoverAnalysisResponse response = visionService.extractTextFromBookCover(file);

        if (bookId != null) {
            response.setBookId(bookId);
        }

        log.info("Successfully extracted text from book cover");
        return ResponseEntity.ok(response);
    }

    /**
     * Endpoint for categorizing book cover images
     * 
     * @param file The book cover image file
     * @return Categories with confidence scores
     */
    @PostMapping(value = "/cover-categories", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ImageCategoryResponse> categorizeBookCover(
            @RequestParam("file") MultipartFile file) {

        log.info("Received request to categorize book cover: {}", file.getOriginalFilename());

        ImageCategoryResponse response = visionService.categorizeImage(file);

        log.info("Successfully categorized book cover with {} categories", response.getCategories().size());
        return ResponseEntity.ok(response);
    }

    /**
     * Endpoint for extracting book metadata (title, author) from cover images
     * 
     * @param file   The book cover image file
     * @param bookId Optional book ID reference
     * @return Extracted metadata
     */
    @PostMapping(value = "/cover-metadata", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<BookCoverAnalysisResponse> extractBookMetadata(
            @RequestParam("file") MultipartFile file,
            @RequestParam(value = "bookId", required = false) String bookId) {

        log.info("Received request to extract metadata from book cover: {}", file.getOriginalFilename());

        BookCoverAnalysisResponse response = visionService.extractBookMetadata(file);

        if (bookId != null) {
            response.setBookId(bookId);
        }

        log.info("Successfully extracted metadata from book cover. Title: {}, Author: {}",
                response.getExtractedTitle(), response.getExtractedAuthor());
        return ResponseEntity.ok(response);
    }
}

### main/java/com/mybookstore/productintelligence/controller/BookDescriptionController.java
package com.mybookstore.productintelligence.controller;

import com.mybookstore.productintelligence.dto.ProductDescriptionRequest;
import com.mybookstore.productintelligence.dto.ProductDescriptionResponse;
import com.mybookstore.productintelligence.service.OpenAIService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/intelligence")
@Tag(name = "Book Description Controller", description = "Erzeugt KI-basierte Buchbeschreibungen mit OpenAI")
public class BookDescriptionController {

    private static final Logger log = LoggerFactory.getLogger(BookDescriptionController.class);
    private final OpenAIService openAIService;

    public BookDescriptionController(OpenAIService openAIService) {
        this.openAIService = openAIService;
    }

    @Operation(summary = "Erzeuge eine Buchbeschreibung", description = "Gib Titel, Autor, Genre usw. ein und erhalte eine automatisch generierte Buchbeschreibung.")
    @PostMapping("/book-description")
    public ResponseEntity<ProductDescriptionResponse> generateBookDescription(
            @Valid @RequestBody ProductDescriptionRequest request) {

        log.info("Received request to generate book description for: {}", request.getTitle());

        ProductDescriptionResponse response = openAIService.generateProductDescription(request);

        log.info("Successfully generated book description with {} tokens", response.getTotalTokens());
        return ResponseEntity.ok(response);
    }
}


### main/java/com/mybookstore/productintelligence/controller/BookIntelligenceController.java
package com.mybookstore.productintelligence.controller;

import com.mybookstore.productintelligence.dto.AnalysisResponseDto;
import com.mybookstore.productintelligence.service.BookIntelligenceService;
import lombok.RequiredArgsConstructor;

import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@ConditionalOnProperty(name = "ai.metadata.enabled", havingValue = "true")
@RequestMapping("/api/intelligence")
@RequiredArgsConstructor
public class BookIntelligenceController {
    private final BookIntelligenceService bookIntelligenceService;

    @GetMapping("/analysis/{bookId}")
    public ResponseEntity<AnalysisResponseDto> getAnalysisForBook(@PathVariable Long bookId) {
        AnalysisResponseDto response = bookIntelligenceService.getDummyAnalysis(bookId);
        return ResponseEntity.ok(response);
    }
}

### main/java/com/mybookstore/productintelligence/dto/AnalysisResponseDto.java
package com.mybookstore.productintelligence.dto;

import lombok.Builder;
import lombok.Data;
import java.util.List;

@Data
@Builder
public class AnalysisResponseDto {
    private Long bookId;
    private String detectedTitle;
    private String detectedAuthor;
    private List<String> suggestedCategories;
    private String generatedDescription;
    private Double confidenceScore;
}

### main/java/com/mybookstore/productintelligence/dto/BookCoverAnalysisResponse.java
package com.mybookstore.productintelligence.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class BookCoverAnalysisResponse {
    private String id;
    private String bookId;
    private String fileName;
    private long fileSize;
    private String contentType;
    private String fullText;
    private List<String> textElements;
    private String extractedTitle;
    private String extractedAuthor;

    @Builder.Default
    private LocalDateTime analysisTimestamp = LocalDateTime.now();
}

### main/java/com/mybookstore/productintelligence/dto/CategoryResult.java
package com.mybookstore.productintelligence.dto;

import lombok.Data;

@Data
public class CategoryResult {
    private String name;
    private float confidence;
}

### main/java/com/mybookstore/productintelligence/dto/ImageCategoryResponse.java
package com.mybookstore.productintelligence.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Repräsentiert die Antwort der Bildkategorisierung durch die Google Vision
 * API.
 * Enthält Informationen über erkannte Kategorien und ihre Konfidenzwerte.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ImageCategoryResponse {
    /**
     * Eindeutige ID der Antwort
     */
    private String id;

    /**
     * Name der analysierten Bilddatei
     */
    private String fileName;

    /**
     * Liste von Kategorien mit ihren Konfidenzwerten
     */
    private List<CategoryResult> categories;

    /**
     * Zeitpunkt der Analyse
     */
    @Builder.Default
    private LocalDateTime analysisTimestamp = LocalDateTime.now();
}

### main/java/com/mybookstore/productintelligence/dto/ProductDescriptionRequest.java
package com.mybookstore.productintelligence.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Schema(description = "Anfrageobjekt zur Erzeugung einer KI-basierten Buchbeschreibung.", example = """
            {
              "title": "Clean Code",
              "author": "Robert C. Martin",
              "genre": "Software Engineering",
              "keywords": ["Clean Code", "Best Practices"],
              "pageCount": 464,
              "targetAudience": "Softwareentwickler",
              "additionalInfo": "Ein Muss für jeden Entwickler"
            }
        """)
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ProductDescriptionRequest {

    @NotBlank
    @Schema(description = "Titel des Buches", example = "Clean Code")
    private String title;

    @NotBlank
    @Schema(description = "Autor des Buches", example = "Robert C. Martin")
    private String author;

    @NotBlank
    @Schema(description = "Genre oder Kategorie", example = "Software Engineering")
    private String genre;

    @NotEmpty
    @Schema(description = "Relevante Schlagworte", example = "[\"Clean Code\", \"Best Practices\"]")
    private List<String> keywords;

    @Min(1)
    @Schema(description = "Anzahl der Seiten", example = "464")
    private int pageCount;

    @NotBlank
    @Schema(description = "Zielgruppe des Buches", example = "Softwareentwickler")
    private String targetAudience;

    @Schema(description = "Zusätzliche Informationen", example = "Ein Muss für jeden Entwickler")
    private String additionalInfo;
}


### main/java/com/mybookstore/productintelligence/dto/ProductDescriptionResponse.java
package com.mybookstore.productintelligence.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Antwortobjekt mit der von OpenAI generierten Buchbeschreibung.")
public class ProductDescriptionResponse {

    @Schema(description = "Die von OpenAI generierte Buchbeschreibung")
    private String description;

    @Schema(description = "Name des verwendeten OpenAI-Modells")
    private String model;

    @Schema(description = "Anzahl der Tokens im Prompt")
    private long promptTokens;

    @Schema(description = "Anzahl der Tokens in der Antwort (Completion)")
    private long completionTokens;

    @Schema(description = "Gesamte Token-Anzahl des Requests")
    private long totalTokens;
}


### main/java/com/mybookstore/productintelligence/exception/GlobalExceptionHandler.java
package com.mybookstore.productintelligence.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.multipart.MaxUploadSizeExceededException;

import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler(OpenAIApiException.class)
    public ResponseEntity<Object> handleOpenAIApiException(OpenAIApiException ex, WebRequest request) {
        log.error("OpenAI API exception occurred: {}", ex.getMessage());

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.BAD_GATEWAY.value());
        body.put("error", "OpenAI API Error");
        body.put("message", ex.getMessage());
        body.put("path", request.getDescription(false));

        return new ResponseEntity<>(body, HttpStatus.BAD_GATEWAY);
    }

    @ExceptionHandler(VisionApiException.class)
    public ResponseEntity<Object> handleVisionApiException(VisionApiException ex, WebRequest request) {
        log.error("Google Vision API exception occurred: {}", ex.getMessage());

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.BAD_GATEWAY.value());
        body.put("error", "Google Vision API Error");
        body.put("message", ex.getMessage());
        body.put("path", request.getDescription(false));

        return new ResponseEntity<>(body, HttpStatus.BAD_GATEWAY);
    }

    @ExceptionHandler(MaxUploadSizeExceededException.class)
    public ResponseEntity<Object> handleMaxSizeException(MaxUploadSizeExceededException ex, WebRequest request) {
        log.error("File size limit exceeded: {}", ex.getMessage());

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.PAYLOAD_TOO_LARGE.value());
        body.put("error", "File Size Limit Exceeded");
        body.put("message", "The uploaded file exceeds the maximum allowed size.");
        body.put("path", request.getDescription(false));

        return new ResponseEntity<>(body, HttpStatus.PAYLOAD_TOO_LARGE);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Object> handleGlobalException(Exception ex, WebRequest request) {
        log.error("Unexpected exception occurred: {}", ex.getMessage());

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        body.put("error", "Internal Server Error");
        body.put("message", "An unexpected error occurred");
        body.put("path", request.getDescription(false));

        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

### main/java/com/mybookstore/productintelligence/exception/OpenAIApiException.java
package com.mybookstore.productintelligence.exception;

public class OpenAIApiException extends RuntimeException {

    public OpenAIApiException(String message) {
        super(message);
    }

    public OpenAIApiException(String message, Throwable cause) {
        super(message, cause);
    }
}

### main/java/com/mybookstore/productintelligence/exception/VisionApiException.java
package com.mybookstore.productintelligence.exception;

public class VisionApiException extends RuntimeException {

    public VisionApiException(String message) {
        super(message);
    }

    public VisionApiException(String message, Throwable cause) {
        super(message, cause);
    }
}

### main/java/com/mybookstore/productintelligence/model/BookMetadata.java
package com.mybookstore.productintelligence.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BookMetadata {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long bookId;
    private String detectedTitle;
    private String detectedAuthor;

    @ElementCollection
    private List<String> suggestedCategories;

    private Double confidenceScore;

    @Column(length = 2000)
    private String generatedDescription;

    private String coverImageUrl;
}

### main/java/com/mybookstore/productintelligence/repository/BookMetadataRepository.java
package com.mybookstore.productintelligence.repository;

import com.mybookstore.productintelligence.model.BookMetadata;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface BookMetadataRepository extends JpaRepository<BookMetadata, Long> {
    Optional<BookMetadata> findByBookId(Long bookId);
}

### main/java/com/mybookstore/productintelligence/service/BookIntelligenceService.java
package com.mybookstore.productintelligence.service;

import com.mybookstore.productintelligence.dto.AnalysisResponseDto;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Service;

@Service
@ConditionalOnProperty(name = "ai.metadata.enabled", havingValue = "true")
public class BookIntelligenceService {

        public AnalysisResponseDto getDummyAnalysis(Long bookId) {
                return AnalysisResponseDto.builder()
                                .bookId(bookId)
                                .detectedTitle("Dies ist eine automatisch generierte Analyse.")
                                .detectedAuthor("Max Mustermann")
                                .build();
        }
}


### main/java/com/mybookstore/productintelligence/service/GoogleVisionService.java
package com.mybookstore.productintelligence.service;

import com.google.cloud.vision.v1.*;
import com.google.protobuf.ByteString;
import com.mybookstore.productintelligence.dto.BookCoverAnalysisResponse;
import com.mybookstore.productintelligence.dto.CategoryResult;
import com.mybookstore.productintelligence.dto.ImageCategoryResponse;
import com.mybookstore.productintelligence.exception.VisionApiException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//@Service
public class GoogleVisionService {

    private static final Logger log = LoggerFactory.getLogger(GoogleVisionService.class);

    @Value("${ai.google-vision.credentials-path}")
    private String credentialsPath;

    /**
     * Creates and returns an ImageAnnotatorClient
     */
    private ImageAnnotatorClient createImageAnnotatorClient() throws IOException {
        // Standard-Zugriff über die Umgebungsvariable GOOGLE_APPLICATION_CREDENTIALS
        return ImageAnnotatorClient.create();
    }

    /**
     * Extracts text from a book cover image
     * 
     * @param file Image file of the book cover
     * @return BookCoverAnalysisResponse with extracted text and metadata
     * @throws VisionApiException if there's an error with the Google Vision API
     */
    public BookCoverAnalysisResponse extractTextFromBookCover(MultipartFile file) {
        try {
            // Create the image to analyze
            ByteString imgBytes = ByteString.copyFrom(file.getBytes());
            Image img = Image.newBuilder().setContent(imgBytes).build();

            // Create the text detection request
            Feature feat = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();
            AnnotateImageRequest request = AnnotateImageRequest.newBuilder()
                    .addFeatures(feat)
                    .setImage(img)
                    .build();

            // Create the client and send the request
            try (ImageAnnotatorClient client = createImageAnnotatorClient()) {
                BatchAnnotateImagesResponse response = client.batchAnnotateImages(List.of(request));
                List<AnnotateImageResponse> responses = response.getResponsesList();

                // Process the response
                for (AnnotateImageResponse res : responses) {
                    if (res.hasError()) {
                        log.error("Error from Google Vision API: {}", res.getError().getMessage());
                        throw new VisionApiException("Error from Google Vision API: " + res.getError().getMessage());
                    }

                    // Extract text annotations
                    TextAnnotation fullText = res.getFullTextAnnotation();
                    List<EntityAnnotation> textAnnotations = res.getTextAnnotationsList();

                    BookCoverAnalysisResponse.BookCoverAnalysisResponseBuilder result = BookCoverAnalysisResponse
                            .builder()
                            .fileName(file.getOriginalFilename())
                            .fileSize(file.getSize())
                            .contentType(file.getContentType());

                    // Set full text if available
                    if (fullText != null) {
                        result.fullText(fullText.getText());
                    } else if (!textAnnotations.isEmpty()) {
                        // The first annotation contains the entire extracted text
                        result.fullText(textAnnotations.get(0).getDescription());

                        // The rest are individual words/elements
                        List<String> textElements = textAnnotations.stream()
                                .skip(1) // Skip the first one as it contains the full text
                                .map(EntityAnnotation::getDescription)
                                .collect(Collectors.toList());
                        result.textElements(textElements);
                    }

                    return result.build();
                }
            }

            throw new VisionApiException("No response received from Google Vision API");
        } catch (IOException e) {
            log.error("Error processing file or communicating with Google Vision API: {}", e.getMessage());
            throw new VisionApiException("Error processing image file", e);
        } catch (Exception e) {
            log.error("Unexpected error during book cover analysis: {}", e.getMessage());
            throw new VisionApiException("Failed to analyze book cover", e);
        }
    }

    /**
     * Categorizes an image using Google Vision API
     * 
     * @param file The image file to categorize
     * @return ImageCategoryResponse with categories and confidence scores
     * @throws VisionApiException if there's an error with the Google Vision API
     */
    public ImageCategoryResponse categorizeImage(MultipartFile file) {
        try {
            // Create the image to analyze
            ByteString imgBytes = ByteString.copyFrom(file.getBytes());
            Image img = Image.newBuilder().setContent(imgBytes).build();

            // Create the label detection request
            Feature feat = Feature.newBuilder().setType(Feature.Type.LABEL_DETECTION)
                    .setMaxResults(10)
                    .build();
            AnnotateImageRequest request = AnnotateImageRequest.newBuilder()
                    .addFeatures(feat)
                    .setImage(img)
                    .build();

            // Create the client and send the request
            try (ImageAnnotatorClient client = createImageAnnotatorClient()) {
                BatchAnnotateImagesResponse response = client.batchAnnotateImages(List.of(request));
                List<AnnotateImageResponse> responses = response.getResponsesList();

                // Process the response
                for (AnnotateImageResponse res : responses) {
                    if (res.hasError()) {
                        log.error("Error from Google Vision API: {}", res.getError().getMessage());
                        throw new VisionApiException("Error from Google Vision API: " + res.getError().getMessage());
                    }

                    // Extract label annotations
                    List<EntityAnnotation> labels = res.getLabelAnnotationsList();

                    ImageCategoryResponse.ImageCategoryResponseBuilder result = ImageCategoryResponse.builder()
                            .fileName(file.getOriginalFilename());

                    // Create a list of categories with confidence scores
                    List<CategoryResult> categories = new ArrayList<>();
                    for (EntityAnnotation label : labels) {
                        CategoryResult category = new CategoryResult();
                        category.setName(label.getDescription());
                        category.setConfidence(label.getScore());
                        categories.add(category);
                    }

                    result.categories(categories);
                    return result.build();
                }
            }

            throw new VisionApiException("No response received from Google Vision API");
        } catch (IOException e) {
            log.error("Error processing file or communicating with Google Vision API: {}", e.getMessage());
            throw new VisionApiException("Error processing image file", e);
        } catch (Exception e) {
            log.error("Unexpected error during image categorization: {}", e.getMessage());
            throw new VisionApiException("Failed to categorize image", e);
        }
    }

    /**
     * Attempts to extract book metadata from a cover image
     * 
     * @param file The book cover image
     * @return Extracted metadata like title, author, etc.
     */
    public BookCoverAnalysisResponse extractBookMetadata(MultipartFile file) {
        BookCoverAnalysisResponse textResponse = extractTextFromBookCover(file);

        // Simple heuristic to identify potential title and author
        // This is a basic implementation and can be enhanced with more sophisticated
        // text analysis or machine learning approaches
        if (textResponse.getTextElements() != null && !textResponse.getTextElements().isEmpty()) {
            List<String> elements = textResponse.getTextElements();

            BookCoverAnalysisResponse.BookCoverAnalysisResponseBuilder builder = BookCoverAnalysisResponse.builder()
                    .id(textResponse.getId())
                    .bookId(textResponse.getBookId())
                    .fileName(textResponse.getFileName())
                    .fileSize(textResponse.getFileSize())
                    .contentType(textResponse.getContentType())
                    .fullText(textResponse.getFullText())
                    .textElements(textResponse.getTextElements());

            // Assume the largest text on cover might be the title
            if (elements.size() > 0) {
                builder.extractedTitle(elements.get(0));
            }

            // Look for text preceded by "by" which might indicate the author
            for (int i = 0; i < elements.size() - 1; i++) {
                if (elements.get(i).equalsIgnoreCase("by")) {
                    builder.extractedAuthor(elements.get(i + 1));
                    break;
                }
            }

            // If no "by" found, try a different heuristic
            if (textResponse.getExtractedAuthor() == null && elements.size() > 1) {
                // Assume the author might be the second most prominent text
                builder.extractedAuthor(elements.get(1));
            }

            return builder.build();
        }

        return textResponse;
    }
}

### main/java/com/mybookstore/productintelligence/service/OpenAIService.java
package com.mybookstore.productintelligence.service;

import com.mybookstore.productintelligence.dto.ProductDescriptionRequest;
import com.mybookstore.productintelligence.dto.ProductDescriptionResponse;
import com.mybookstore.productintelligence.exception.OpenAIApiException;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.service.OpenAiService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

@Service
public class OpenAIService {

    private static final Logger log = LoggerFactory.getLogger(OpenAIService.class);
    private final OpenAiService openAiClient;
    private final String model;

    // Direkte Verwendung der in application.properties definierten Werte
    public OpenAIService(@Value("${ai.openai.api-key}") String apiKey,
            @Value("${ai.openai.model:gpt-3.5-turbo}") String model) {
        this.openAiClient = new OpenAiService(apiKey, Duration.ofSeconds(60));
        this.model = model;
    }

    /**
     * Generates a product description based on provided book details
     * 
     * @param request The request containing book details
     * @return ProductDescriptionResponse with generated content
     * @throws OpenAIApiException if there's an error with the OpenAI API call
     */
    public ProductDescriptionResponse generateProductDescription(ProductDescriptionRequest request) {
        try {
            // Create the message for OpenAI
            List<ChatMessage> messages = new ArrayList<>();
            ChatMessage systemMessage = new ChatMessage("system",
                    "You are an experienced book marketing expert who writes engaging product descriptions.");
            messages.add(systemMessage);

            ChatMessage userMessage = new ChatMessage("user", buildPrompt(request));
            messages.add(userMessage);

            // Create the request
            ChatCompletionRequest completionRequest = ChatCompletionRequest.builder()
                    .model(model)
                    .messages(messages)
                    .temperature(0.7)
                    .maxTokens(500)
                    .build();

            // Send the request to OpenAI
            ChatCompletionResult result = openAiClient.createChatCompletion(completionRequest);

            // Create the response
            return ProductDescriptionResponse.builder()
                    .description(result.getChoices().get(0).getMessage().getContent())
                    .model(result.getModel())
                    .promptTokens(result.getUsage().getPromptTokens())
                    .completionTokens(result.getUsage().getCompletionTokens())
                    .totalTokens(result.getUsage().getTotalTokens())
                    .build();
        } catch (Exception e) {
            log.error("Error generating product description: {}", e.getMessage());
            throw new OpenAIApiException("Error generating product description", e);
        }
    }

    /**
     * Builds the prompt for OpenAI based on book details
     */
    private String buildPrompt(ProductDescriptionRequest request) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("Create a compelling product description for a book with the following details:\n\n");

        if (request.getTitle() != null) {
            prompt.append("Title: ").append(request.getTitle()).append("\n");
        }

        if (request.getAuthor() != null) {
            prompt.append("Author: ").append(request.getAuthor()).append("\n");
        }

        if (request.getGenre() != null) {
            prompt.append("Genre: ").append(request.getGenre()).append("\n");
        }

        if (request.getKeywords() != null && !request.getKeywords().isEmpty()) {
            prompt.append("Keywords: ").append(String.join(", ", request.getKeywords())).append("\n");
        }

        if (request.getPageCount() > 0) {
            prompt.append("Page Count: ").append(request.getPageCount()).append("\n");
        }

        if (request.getTargetAudience() != null) {
            prompt.append("Target Audience: ").append(request.getTargetAudience()).append("\n");
        }

        if (request.getAdditionalInfo() != null) {
            prompt.append("\nAdditional Information: ").append(request.getAdditionalInfo()).append("\n");
        }

        prompt.append(
                "\nPlease create a marketing description of about 200-300 words that highlights the book's unique features, engages the target audience, and encourages readers to purchase it. The description should be professional, compelling, and suitable for an online bookstore.");

        return prompt.toString();
    }
}

### main/resources/static/index.html
<!DOCTYPE html>
<html lang="de">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    
    <title>PIM-AI-Connector – Intelligente Produktbeschreibungen für PIM & E-Commerce</title>
    <meta name="description"
        content="Der PIM-AI-Connector automatisiert Produktbeschreibungen mit KI – ideal für PIM-, DAM- und E-Commerce-Systeme. Schnell, präzise, individuell." />
    <meta name="author" content="DNguyen" />
    <meta name="keywords"
        content="PIM, Produktinformationen, KI, E-Commerce, AI Product Description, DAM, OpenAI, Java, Microservices, Spring Boot" />
    
    <!-- Favicons -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" href="/assets/favicon.png" sizes="32x32" />
    
    <!-- Google Fonts: Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    
    <!-- Social Sharing (für zukünftige Seiten) -->
    <meta property="og:title" content="PIM-AI-Connector" />
    <meta property="og:description" content="KI-gestützte Produkttexte für PIM & E-Commerce." />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/assets/preview.jpg" />
    <meta property="og:url" content="https://pim-ai-connector-demo.onrender.com" />
    <style>
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            background: #f8f9fa;
            color: #333;
        }

        header {
            background: #2c3e50;
            color: white;
            padding: 2rem 1rem;
            text-align: center;
        }

        header h1 {
            margin: 0;
            font-size: 2.2rem;
        }

        header p {
            font-size: 1.1rem;
            margin-top: 0.5rem;
            color: #d1dce5;
        }

        main {
            max-width: 900px;
            margin: 2rem auto;
            padding: 1rem;
        }

        section {
            margin-bottom: 2.5rem;
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        }

        h2 {
            color: #2c3e50;
            font-size: 1.4rem;
            border-left: 4px solid #3498db;
            padding-left: 0.5rem;
        }

        a {
            color: #3498db;
            text-decoration: none;
        }

        .note {
            background: #fff3cd;
            color: #856404;
            padding: 1rem;
            border-left: 5px solid #ffc107;
            border-radius: 4px;
            margin-top: 1rem;
        }

        pre {
            background: #f4f4f4;
            padding: 1rem;
            overflow-x: auto;
            border-radius: 4px;
            font-size: 0.9rem;
        }

        ul {
            padding-left: 1.2rem;
        }

        footer {
            text-align: center;
            font-size: 0.85rem;
            color: #777;
            padding: 2rem 1rem;
        }
    </style>
</head>

<body>
    <header>
        <h1>PIM-AI-Connector</h1>
        <p>Automatisierte Produktbeschreibungen mit KI für PIM- & E-Commerce-Systeme</p>
    </header>

    <main>

        <section>
            <h2>🔗 Live-Demo API-Endpunkt</h2>
            <p>
                Endpunkt für KI-basierte Produktbeschreibung:
                <br>
                <code id="endpoint-url"></code>
            </p>
            <div class="note">
                <strong>Wichtig:</strong> Dieser Endpunkt ist ein <u>POST-Endpunkt</u> und <u>nicht direkt im Browser
                    aufrufbar</u>.
                Bitte verwende Swagger UI oder ein Tool wie <code>curl</code> oder Postman.
            </div>
        </section>

        <section>
            <h2>📄 Swagger API-Dokumentation</h2>
            <p>
                Automatisch generierte Übersicht aller REST-Endpunkte:
                <br>
                👉 <a id="swagger-link" href="#" target="_blank">Swagger UI ansehen</a>
            </p>
            <div class="note">
                Du kannst die API direkt in Swagger testen – z. B. mit dem Beispiel "Der Herr der Ringe".
            </div>
        </section>

        <section>
            <h2>💻 Beispiel cURL Request</h2>
            <pre id="curl-example"></pre>
        </section>

        <section>
            <h2>📥 Beispiel-Antwort</h2>
            <pre>{
  "description": "Step into the enchanting world of Mittelerde...",
  "model": "gpt-3.5-turbo-0125",
  "promptTokens": 134,
  "completionTokens": 300,
  "totalTokens": 434
}</pre>
        </section>

        <section>
            <h2>📦 Tech-Stack</h2>
            <ul>
                <li>Java 21, Spring Boot 3</li>
                <li>REST APIs, Microservices</li>
                <li>OpenAI API Integration</li>
                <li>Angular Frontend</li>
                <li>Docker & docker-compose</li>
            </ul>
        </section>

        <section>
            <h2>🚀 Geplante Erweiterungen</h2>
            <ul>
                <li>Texterkennung und Cover-Analyse mit Google Vision API</li>
                <li>Automatische Kategorie-Zuordnung auf Basis von Bild + Inhalt</li>
                <li>Produktdaten-Synchronisation mit PIM-Systemen</li>
                <li>Multilinguale Beschreibungen (Deutsch, Englisch, Französisch)</li>
                <li>Admin-Dashboard für Upload & KI-Training</li>
            </ul>
        </section>

        <section>
            <h2>🎯 Zielgruppen</h2>
            <ul>
                <li>PIM-/DAM-Systemanbieter</li>
                <li>E-Commerce-Plattformen</li>
                <li>Agenturen & Content-Teams</li>
                <li>Proof-of-Concept für Bewerbungen</li>
                <li>Investor- oder Partner-Präsentationen</li>
            </ul>
        </section>

        <section>
            <h2>🔒 Code & Kontakt</h2>
            <p>
                Dieses Projekt ist ein privates GitHub-Repo.<br>
                👉 Bei Interesse bitte <a href="mailto:n.thanh@gmx.de">n.thanh@gmx.de kontaktieren</a>.
            </p>
            <p>
                📁 <a href="https://github.com/thanhtuanh" target="_blank">Weitere Projekte auf GitHub</a>
            </p>
        </section>
    </main>

    <footer>
        © 2025 DNguyen – PIM-AI-Connector Demo. Alle Rechte vorbehalten.
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const isLocal = location.hostname === 'localhost' || location.hostname === '127.0.0.1';
            const protocol = isLocal ? 'http' : 'https';
            const port = isLocal ? ':8085' : '';
            const baseUrl = `${protocol}://${location.hostname}${port}`;
            const apiEndpoint = `${baseUrl}/api/intelligence/book-description`;

            document.getElementById('swagger-link').href = `${baseUrl}/swagger-ui/index.html`;
            document.getElementById('endpoint-url').textContent = apiEndpoint;
            document.getElementById('curl-example').textContent = `curl --max-time 60 -X POST ${apiEndpoint} \\
-H "Content-Type: application/json" \\
-d '{\n  "title": "Der Herr der Ringe",\n  "author": "J.R.R. Tolkien",\n  "genre": "Fantasy",\n  "keywords": ["Mittelerde", "Hobbits", "Abenteuer"],\n  "pageCount": 1178,\n  "targetAudience": "Fantasy-Liebhaber"\n}'`;
        });
    </script>
</body>

</html>

